


var base64EncodeChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
var base64DecodeChars = new Array(
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63,
    52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1,
    -1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,
    15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1,
    -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
    41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1);


//客户端Base64编码
function base64encode_old(str) {
    var out, i, len;
    var c1, c2, c3;

    len = str.length;
    i = 0;
    out = "";
    while(i < len) {
		 c1 = str.charCodeAt(i++) & 0xff;
		 if(i == len)
		 {
		     out += base64EncodeChars.charAt(c1 >> 2);
		     out += base64EncodeChars.charAt((c1 & 0x3) << 4);
		     out += "==";
		     break;
		 }
		 c2 = str.charCodeAt(i++);
		 if(i == len)
		 {
		     out += base64EncodeChars.charAt(c1 >> 2);
		     out += base64EncodeChars.charAt(((c1 & 0x3)<< 4) | ((c2 & 0xF0) >> 4));
		     out += base64EncodeChars.charAt((c2 & 0xF) << 2);
		     out += "=";
		     break;
		 }
		 c3 = str.charCodeAt(i++);
		 out += base64EncodeChars.charAt(c1 >> 2);
		 out += base64EncodeChars.charAt(((c1 & 0x3)<< 4) | ((c2 & 0xF0) >> 4));
		 out += base64EncodeChars.charAt(((c2 & 0xF) << 2) | ((c3 & 0xC0) >>6));
		 out += base64EncodeChars.charAt(c3 & 0x3F);
    }
    return out;
}


//客户端Base64解码
function base64decode_old(str) {
    var c1, c2, c3, c4;
    var i, len, out;

    len = str.length;
    i = 0;
    out = "";
    while(i < len) {
	// c1 
	 do {
	     c1 = base64DecodeChars[str.charCodeAt(i++) & 0xff];
	 } while(i < len && c1 == -1);
	 if(c1 == -1)
	     break;

	// c2 
	 do {
	     c2 = base64DecodeChars[str.charCodeAt(i++) & 0xff];
	 } while(i < len && c2 == -1);
	 if(c2 == -1)
	     break;

	 out += String.fromCharCode((c1 << 2) | ((c2 & 0x30) >> 4));

	//c3 
	 do {
	     c3 = str.charCodeAt(i++) & 0xff;
	     if(c3 == 61)
	  return out;
	     c3 = base64DecodeChars[c3];
	 } while(i < len && c3 == -1);
	 if(c3 == -1)
	     break;

	 out += String.fromCharCode(((c2 & 0XF) << 4) | ((c3 & 0x3C) >> 2));

	// c4 
	 do {
	     c4 = str.charCodeAt(i++) & 0xff;
	     if(c4 == 61)
	  return out;
	     c4 = base64DecodeChars[c4];
	 } while(i < len && c4 == -1);
	 if(c4 == -1)
	     break;
	 out += String.fromCharCode(((c3 & 0x03) << 6) | c4);
	  }
    return out;
}


//canyon 2019 11 20

/**
 *Base64字符串转二进制
 */
function Base64ToBin(base64)
{
	var mime = 'application/octet-stream';
	var bstr = atob(base64);
	var n = bstr.length;
	var u8arr = new Uint8Array(n);
	while(n--) {
		u8arr[n] = bstr.charCodeAt(n);
	}
	return new Blob([u8arr], {
		type: mime
	});
}
function BinToBase64(bin)
{
	var binVal="";
	for(var i = 0; i < bin.length; i++)
	{
		//val += String.fromCharCode(parseInt(bin[i],16));
		binVal += String.fromCharCode(bin[i]);
	}
	var base64 = btoa(binVal);
	var length = base64.length;
	return base64;
}

/*
function BinToBase64(bin) {
	var binBlob = new Blob([bin], { type:'application/octet-stream'});
	var reader = new FileReader();
	reader.readAsDataURL(binBlob);
	reader.onloadend = function (e) {
		var fileContent=null;// = this.result;
		var pos = fileContent.indexOf("base64,");
		 if (pos != -1)
		 {
			var base64 = fileContent.substr(pos+7);
			return base64;
		 }
		return fileContent;
		console.info(e); //事件对象
        //e.target  FileReader
        //e.total   文件总大小，字节
        //e.type    上传状态‘load’
        //e.timeStamp  还不知道

        console.info(reader.readyState); //状态值 2
        var result = reader.result;
	}
	return null;
}*/

 function dataURLtoBlob(dataurl) {
	var arr = dataurl.split(','),
		mime = arr[0].match(/:(.*?);/)[1],
		bstr = atob(arr[1]),
		n = bstr.length,
		u8arr = new Uint8Array(n);
	while(n--) {
		u8arr[n] = bstr.charCodeAt(n);
	}
	return new Blob([u8arr], {
		type: mime
	});
}


var Base64 = {
	_keyStr: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
	encode: function(e) {
		var t = "";
		var n, r, i, s, o, u, a;
		var f = 0;
		e = Base64._utf8_encode(e);
		while (f < e.length) {
			n = e.charCodeAt(f++);
			r = e.charCodeAt(f++);
			i = e.charCodeAt(f++);
			s = n >> 2;
			o = (n & 3) << 4 | r >> 4;
			u = (r & 15) << 2 | i >> 6;
			a = i & 63;
			if (isNaN(r)) {
				u = a = 64
			} else if (isNaN(i)) {
				a = 64
			}
			t = t + this._keyStr.charAt(s) + this._keyStr.charAt(o) + this._keyStr.charAt(u) + this._keyStr.charAt(a)
		}
		return t
	},
	decode: function(e) {
		var t = "";
		var n, r, i;
		var s, o, u, a;
		var f = 0;
		e = e.replace(/[^A-Za-z0-9+/=]/g, "");
		while (f < e.length) {
			s = this._keyStr.indexOf(e.charAt(f++));
			o = this._keyStr.indexOf(e.charAt(f++));
			u = this._keyStr.indexOf(e.charAt(f++));
			a = this._keyStr.indexOf(e.charAt(f++));
			n = s << 2 | o >> 4;
			r = (o & 15) << 4 | u >> 2;
			i = (u & 3) << 6 | a;
			t = t + String.fromCharCode(n);
			if (u != 64) {
				t = t + String.fromCharCode(r)
			}
			if (a != 64) {
				t = t + String.fromCharCode(i)
			}
		}
		t = Base64._utf8_decode(t);
		return t
	},
	_utf8_encode: function(e) {
		e = e.replace(/rn/g, "n");
		var t = "";
		for (var n = 0; n < e.length; n++) {
			var r = e.charCodeAt(n);
			if (r < 128) {
				t += String.fromCharCode(r)
			} else if (r > 127 && r < 2048) {
				t += String.fromCharCode(r >> 6 | 192);
				t += String.fromCharCode(r & 63 | 128)
			} else {
				t += String.fromCharCode(r >> 12 | 224);
				t += String.fromCharCode(r >> 6 & 63 | 128);
				t += String.fromCharCode(r & 63 | 128)
			}
		}
		return t
	},
	_utf8_decode: function(e) {
		var t = "";
		var n = 0;
		var r = c1 = c2 = 0;
		while (n < e.length) {
			r = e.charCodeAt(n);
			if (r < 128) {
				t += String.fromCharCode(r);
				n++
			} else if (r > 191 && r < 224) {
				c2 = e.charCodeAt(n + 1);
				t += String.fromCharCode((r & 31) << 6 | c2 & 63);
				n += 2
			} else {
				c2 = e.charCodeAt(n + 1);
				c3 = e.charCodeAt(n + 2);
				t += String.fromCharCode((r & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
				n += 3
			}
		}
		return t
	}
}



function base64encode(str) {

	return Base64.encode(str);

}

function base64decode(str) {

	return Base64.decode(str);
}




function base64encodeUtf8(str) {

	return Base64._utf8_encode(str);

}

function base64decodeUtf8(str) {

	return Base64._utf8_decode(str);
}

//added end

