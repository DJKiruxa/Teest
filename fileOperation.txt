
//canyon 2019 12 08

function ExportFile(name, data) {
	var urlObject = window.URL || window.webkitURL || window;
	var export_blob = new Blob([data], { type:'text/html'});
	//var export_blob = new Blob([data], { type:'application/octet-stream'});
	var save_link = document.createElementNS("http://www.w3.org/1999/xhtml", "a")
	save_link.href = urlObject.createObjectURL(export_blob);
	save_link.download = name;
	
	var ev = document.createEvent("MouseEvents");
	ev.initMouseEvent("click", true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
	save_link.dispatchEvent(ev);
}


function FindContent(content){
	 var pos = content.indexOf("base64,");
	 if (pos != -1)
	 {
		var base64 = content.substr(pos+7);
		return base64;
	 }
	return content;
}

function ReadFile(files, fileType, fileName) {
	console.log("ReadFile");
	var fileContent = null;
	if (files.length) {
		var file = files[0];
		var reader = new FileReader();//new一个FileReader实例
		fileName = file.name;

		var suffix = fileName.substr(fileName.lastIndexOf(".") + 1);
		if (suffix == fileType) 
		{
			reader.onload = function () { //注意该方法为异步方式，顾无法及时返回有效内容，只能返回null
				fileContent = FindContent(this.result);
			}
			reader.readAsDataURL(file);
		} 
	}
	return fileContent;
}


function ImportFile(fileName, fileContent, url)
{
	if (fileName == null || fileContent==null) {
		layer.alert("Please select the correct file!");
		return ;
	}

	var param = {
		"name": fileName,
		"file": fileContent,
	};
	var jsonRpc = new jsonrpc();
	jsonRpc.setparams(param);
	httpPostSyn(url, jsonRpc.jsonstr(), function success(response) {
		console.log(response);
		if (response.result == "true") {
			msgTip("Import successfully!");
			return true;
		}
		else {
			if (response.error != null) {
				showError("Import failed, error code:" + response.error.code);
			}
			else {
				showError("Import failed!");
			}
		}
	}, function error(error) {
		showError("Import failed");
	});
	return false;
}